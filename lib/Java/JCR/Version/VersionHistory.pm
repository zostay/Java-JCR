package Java::JCR::Version::VersionHistory;

# This code was automatically generated by a combination of the
# JCRPackageGenerator.java and package-generator.pl programs. These are both
# distributed in the inc/ directory of the Java-JCR distribution. You should
# be able to find the latest Java-JCR distribution at:
#
#   http://search.cpan.org/~hanenkamp/Java-JCR/
#

use strict;
use warnings;

use base qw( Java::JCR::Base Java::JCR::Node );

our $VERSION = '0.03';

use Inline (
    Java => 'STUDY',
    STUDY => [],
);
use Inline::Java qw( study_classes );

study_classes(['javax.jcr.version.VersionHistory'], 'Java::JCR');

sub has_property {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->hasProperty(@args);
    return $result;
}

sub done_merge {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->doneMerge(@args);
    return $result;
}

sub remove {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->remove(@args);
    return $result;
}

sub get_lock {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getLock(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.lock.Lock", "Java::JCR::Lock::Lock");
}

sub get_name {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getName(@args);
    return $result;
}

sub lock {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->lock(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.lock.Lock", "Java::JCR::Lock::Lock");
}

sub has_version_label {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->hasVersionLabel(@args);
    return $result;
}

sub get_root_version {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getRootVersion(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.version.Version", "Java::JCR::Version::Version");
}

sub restore {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->restore(@args);
    return $result;
}

sub get_references {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getReferences(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.PropertyIterator", "Java::JCR::PropertyIterator");
}

sub has_nodes {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->hasNodes(@args);
    return $result;
}

sub get_path {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getPath(@args);
    return $result;
}

sub save {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->save(@args);
    return $result;
}

sub get_properties {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getProperties(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.PropertyIterator", "Java::JCR::PropertyIterator");
}

sub refresh {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->refresh(@args);
    return $result;
}

sub set_property {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->setProperty(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.Property", "Java::JCR::Property");
}

sub is_node {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->isNode(@args);
    return $result;
}

sub remove_version_label {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->removeVersionLabel(@args);
    return $result;
}

sub unlock {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->unlock(@args);
    return $result;
}

sub has_node {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->hasNode(@args);
    return $result;
}

sub remove_version {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->removeVersion(@args);
    return $result;
}

sub is_locked {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->isLocked(@args);
    return $result;
}

sub get_all_versions {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getAllVersions(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.version.VersionIterator", "Java::JCR::Version::VersionIterator");
}

sub get_primary_node_type {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getPrimaryNodeType(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.nodetype.NodeType", "Java::JCR::Nodetype::NodeType");
}

sub is_checked_out {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->isCheckedOut(@args);
    return $result;
}

sub remove_mixin {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->removeMixin(@args);
    return $result;
}

sub add_node {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->addNode(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.Node", "Java::JCR::Node");
}

sub get_version_history {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getVersionHistory(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.version.VersionHistory", "Java::JCR::Version::VersionHistory");
}

sub get_depth {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getDepth(@args);
    return $result;
}

sub get_uuid {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getUUID(@args);
    return $result;
}

sub get_session {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getSession(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.Session", "Java::JCR::Session");
}

sub get_corresponding_node_path {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getCorrespondingNodePath(@args);
    return $result;
}

sub is_same {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->isSame(@args);
    return $result;
}

sub get_ancestor {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getAncestor(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.Item", "Java::JCR::Item");
}

sub holds_lock {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->holdsLock(@args);
    return $result;
}

sub order_before {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->orderBefore(@args);
    return $result;
}

sub get_version_labels {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getVersionLabels(@args);
    return $result;
}

sub merge {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->merge(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.NodeIterator", "Java::JCR::NodeIterator");
}

sub has_properties {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->hasProperties(@args);
    return $result;
}

sub checkin {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->checkin(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.version.Version", "Java::JCR::Version::Version");
}

sub get_node {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getNode(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.Node", "Java::JCR::Node");
}

sub add_version_label {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->addVersionLabel(@args);
    return $result;
}

sub get_version {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getVersion(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.version.Version", "Java::JCR::Version::Version");
}

sub accept {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->accept(@args);
    return $result;
}

sub get_property {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getProperty(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.Property", "Java::JCR::Property");
}

sub get_index {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getIndex(@args);
    return $result;
}

sub is_node_type {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->isNodeType(@args);
    return $result;
}

sub get_primary_item {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getPrimaryItem(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.Item", "Java::JCR::Item");
}

sub get_nodes {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getNodes(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.NodeIterator", "Java::JCR::NodeIterator");
}

sub get_versionable_uuid {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getVersionableUUID(@args);
    return $result;
}

sub cancel_merge {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->cancelMerge(@args);
    return $result;
}

sub get_mixin_node_types {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getMixinNodeTypes(@args);
    return Java::JCR::Base::_process_return($result, "Array:javax.jcr.nodetype.NodeType", "Java::JCR::Nodetype::NodeType");
}

sub is_new {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->isNew(@args);
    return $result;
}

sub checkout {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->checkout(@args);
    return $result;
}

sub get_base_version {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getBaseVersion(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.version.Version", "Java::JCR::Version::Version");
}

sub get_parent {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getParent(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.Node", "Java::JCR::Node");
}

sub get_version_by_label {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getVersionByLabel(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.version.Version", "Java::JCR::Version::Version");
}

sub can_add_mixin {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->canAddMixin(@args);
    return $result;
}

sub is_modified {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->isModified(@args);
    return $result;
}

sub update {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->update(@args);
    return $result;
}

sub add_mixin {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->addMixin(@args);
    return $result;
}

sub restore_by_label {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->restoreByLabel(@args);
    return $result;
}

sub get_definition {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);
    my $result = $self->{obj}->getDefinition(@args);
    return Java::JCR::Base::_process_return($result, "javax.jcr.nodetype.NodeDefinition", "Java::JCR::Nodetype::NodeDefinition");
}

1;
__END__

=head1 NAME

Java::JCR::Version::VersionHistory - Perl wrapper for javax.jcr.version.VersionHistory

=head1 DESCRIPTION

This is an automatically generated package wrapping javax.jcr.version.VersionHistory with a nice Perlish API.

For full documentation of what this class does, see the Java API documentation: L<http://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/version/VersionHistory.html>

The deviations from the API documentation include the following:

=over

=item *

You will need to use Perl, intead of Java, to make any use of this API. (Duh.)

=item *

The package to use is L<Java::JCR::Version::VersionHistory>, rather than I<javax.jcr.version.VersionHistory>.

=item *

All method names have been changed from Java-style C<camelCase()> to Perl-style C<lower_case()>. 

Thus, if the function were named C<getName()> in the Java API, it will be named C<get_name()> in this API. As another example, C<nextEventListener()> in the Java API will be C<next_event_listener()> in this API.

=back

=head1 SEE ALSO

L<Java::JCR>, L<http://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/version/VersionHistory.html>

=head1 AUTHOR

Andrew Sterling Hanenkamp, E<lt>hanenkamp@cpan.orgE<gt>

=head1 LICENSE AND COPYRIGHT

Copyright 2006 Andrew Sterling Hanenkamp E<lt>hanenkamp@cpan.orgE<gt>.  All 
Rights Reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.

=cut

