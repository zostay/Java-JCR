package Java::JCR::PropertyType;

# This code was automatically generated by a combination of the
# JCRPackageGenerator.java and package-generator.pl programs. These are both
# distributed in the inc/ directory of the Java-JCR distribution. You should
# be able to find the latest Java-JCR distribution at:
#
#   http://search.cpan.org/~hanenkamp/Java-JCR/
#

use strict;
use warnings;

use base qw( Java::JCR::Base );

our $VERSION = '0.07';

use Carp;
use Inline (
    Java => 'STUDY',
    STUDY => [],
);
use Inline::Java qw( study_classes );

study_classes(['javax.jcr.PropertyType'], 'Java::JCR');

*STRING = *Java::JCR::javax::jcr::PropertyType::STRING;
*BINARY = *Java::JCR::javax::jcr::PropertyType::BINARY;
*LONG = *Java::JCR::javax::jcr::PropertyType::LONG;
*DOUBLE = *Java::JCR::javax::jcr::PropertyType::DOUBLE;
*DATE = *Java::JCR::javax::jcr::PropertyType::DATE;
*BOOLEAN = *Java::JCR::javax::jcr::PropertyType::BOOLEAN;
*NAME = *Java::JCR::javax::jcr::PropertyType::NAME;
*PATH = *Java::JCR::javax::jcr::PropertyType::PATH;
*REFERENCE = *Java::JCR::javax::jcr::PropertyType::REFERENCE;
*UNDEFINED = *Java::JCR::javax::jcr::PropertyType::UNDEFINED;
*TYPENAME_STRING = *Java::JCR::javax::jcr::PropertyType::TYPENAME_STRING;
*TYPENAME_BINARY = *Java::JCR::javax::jcr::PropertyType::TYPENAME_BINARY;
*TYPENAME_LONG = *Java::JCR::javax::jcr::PropertyType::TYPENAME_LONG;
*TYPENAME_DOUBLE = *Java::JCR::javax::jcr::PropertyType::TYPENAME_DOUBLE;
*TYPENAME_DATE = *Java::JCR::javax::jcr::PropertyType::TYPENAME_DATE;
*TYPENAME_BOOLEAN = *Java::JCR::javax::jcr::PropertyType::TYPENAME_BOOLEAN;
*TYPENAME_NAME = *Java::JCR::javax::jcr::PropertyType::TYPENAME_NAME;
*TYPENAME_PATH = *Java::JCR::javax::jcr::PropertyType::TYPENAME_PATH;
*TYPENAME_REFERENCE = *Java::JCR::javax::jcr::PropertyType::TYPENAME_REFERENCE;
*TYPENAME_UNDEFINED = *Java::JCR::javax::jcr::PropertyType::TYPENAME_UNDEFINED;

sub name_from_value {
    my $class = shift;
    my @args = Java::JCR::Base::_process_args(@_);

    my $result = eval { Java::JCR::javax::jcr::PropertyType->nameFromValue(@args) };
    if ($@) { my $e = Java::JCR::Exception->new($@); croak $e }

    return $result;
}

sub value_from_name {
    my $class = shift;
    my @args = Java::JCR::Base::_process_args(@_);

    my $result = eval { Java::JCR::javax::jcr::PropertyType->valueFromName(@args) };
    if ($@) { my $e = Java::JCR::Exception->new($@); croak $e }

    return $result;
}

sub to_string {
    my $self = shift;
    my @args = Java::JCR::Base::_process_args(@_);

    my $result = eval { $self->{obj}->toString(@args) };
    if ($@) { my $e = Java::JCR::Exception->new($@); croak $e }

    return $result;
}

1;
__END__

=head1 NAME

Java::JCR::PropertyType - Perl wrapper for javax.jcr.PropertyType

=head1 DESCRIPTION

This is an automatically generated package wrapping javax.jcr.PropertyType with a nice Perlish API.

For full documentation of what this class does, see the Java API documentation: L<http://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/PropertyType.html>

The deviations from the API documentation include the following:

=over

=item *

You will need to use Perl, intead of Java, to make any use of this API. (Duh.)

=item *

The package to use is L<Java::JCR::PropertyType>, rather than I<javax.jcr.PropertyType>.

=item *

All method names have been changed from Java-style C<camelCase()> to Perl-style C<lower_case()>. 

Thus, if the function were named C<getName()> in the Java API, it will be named C<get_name()> in this API. As another example, C<nextEventListener()> in the Java API will be C<next_event_listener()> in this API.

=item *

Handle exceptions just like typical Perl. L<Java::JCR::Exception> takes care of making sure that works as expected.

=back

=head1 SEE ALSO

L<Java::JCR>, L<http://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/PropertyType.html>

=head1 AUTHOR

Andrew Sterling Hanenkamp, E<lt>hanenkamp@cpan.orgE<gt>

=head1 LICENSE AND COPYRIGHT

Copyright 2006 Andrew Sterling Hanenkamp E<lt>hanenkamp@cpan.orgE<gt>.  All 
Rights Reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.

=cut

